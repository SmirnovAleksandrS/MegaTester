
DiodetesterTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003294  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800342c  0800342c  0001342c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003444  08003444  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003444  08003444  00013444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800344c  0800344c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003454  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000014  08003468  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003468  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000621c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001484  00000000  00000000  00026260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a0  00000000  00000000  000276e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f8  00000000  00000000  00027c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000156ff  00000000  00000000  00028180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f3f  00000000  00000000  0003d87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a59f  00000000  00000000  000447be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ced5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001680  00000000  00000000  000cedb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003414 	.word	0x08003414

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08003414 	.word	0x08003414

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b974 	b.w	8000cb4 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468e      	mov	lr, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14d      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4694      	mov	ip, r2
 80009f6:	d969      	bls.n	8000acc <__udivmoddi4+0xe8>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b152      	cbz	r2, 8000a14 <__udivmoddi4+0x30>
 80009fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000a02:	f1c2 0120 	rsb	r1, r2, #32
 8000a06:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a12:	4094      	lsls	r4, r2
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	0c21      	lsrs	r1, r4, #16
 8000a1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a1e:	fa1f f78c 	uxth.w	r7, ip
 8000a22:	fb08 e316 	mls	r3, r8, r6, lr
 8000a26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a2a:	fb06 f107 	mul.w	r1, r6, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a3a:	f080 811f 	bcs.w	8000c7c <__udivmoddi4+0x298>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 811c 	bls.w	8000c7c <__udivmoddi4+0x298>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a50:	fb08 3310 	mls	r3, r8, r0, r3
 8000a54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a58:	fb00 f707 	mul.w	r7, r0, r7
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	d90a      	bls.n	8000a76 <__udivmoddi4+0x92>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a68:	f080 810a 	bcs.w	8000c80 <__udivmoddi4+0x29c>
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	f240 8107 	bls.w	8000c80 <__udivmoddi4+0x29c>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	1be4      	subs	r4, r4, r7
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	b11d      	cbz	r5, 8000a88 <__udivmoddi4+0xa4>
 8000a80:	40d4      	lsrs	r4, r2
 8000a82:	2300      	movs	r3, #0
 8000a84:	e9c5 4300 	strd	r4, r3, [r5]
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d909      	bls.n	8000aa6 <__udivmoddi4+0xc2>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f000 80ef 	beq.w	8000c76 <__udivmoddi4+0x292>
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	fab3 f683 	clz	r6, r3
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d14a      	bne.n	8000b44 <__udivmoddi4+0x160>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xd4>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80f9 	bhi.w	8000caa <__udivmoddi4+0x2c6>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb61 0303 	sbc.w	r3, r1, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e0      	beq.n	8000a88 <__udivmoddi4+0xa4>
 8000ac6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aca:	e7dd      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000acc:	b902      	cbnz	r2, 8000ad0 <__udivmoddi4+0xec>
 8000ace:	deff      	udf	#255	; 0xff
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	f040 8092 	bne.w	8000bfe <__udivmoddi4+0x21a>
 8000ada:	eba1 010c 	sub.w	r1, r1, ip
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	0c20      	lsrs	r0, r4, #16
 8000aea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aee:	fb07 1113 	mls	r1, r7, r3, r1
 8000af2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af6:	fb0e f003 	mul.w	r0, lr, r3
 8000afa:	4288      	cmp	r0, r1
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x12c>
 8000afe:	eb1c 0101 	adds.w	r1, ip, r1
 8000b02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x12a>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2c0>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	1a09      	subs	r1, r1, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b18:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x156>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x154>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2ca>
 8000b38:	4608      	mov	r0, r1
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b42:	e79c      	b.n	8000a7e <__udivmoddi4+0x9a>
 8000b44:	f1c6 0720 	rsb	r7, r6, #32
 8000b48:	40b3      	lsls	r3, r6
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa20 f407 	lsr.w	r4, r0, r7
 8000b56:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5a:	431c      	orrs	r4, r3
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b62:	fa00 f306 	lsl.w	r3, r0, r6
 8000b66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b6a:	0c20      	lsrs	r0, r4, #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fb09 1118 	mls	r1, r9, r8, r1
 8000b74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b78:	fb08 f00e 	mul.w	r0, r8, lr
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b8>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4461      	add	r1, ip
 8000b9c:	1a09      	subs	r1, r1, r0
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	458e      	cmp	lr, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1e2>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2b4>
 8000bbe:	458e      	cmp	lr, r1
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2b4>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bca:	fba0 9402 	umull	r9, r4, r0, r2
 8000bce:	eba1 010e 	sub.w	r1, r1, lr
 8000bd2:	42a1      	cmp	r1, r4
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46a6      	mov	lr, r4
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x2a4>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x2a0>
 8000bdc:	b15d      	cbz	r5, 8000bf6 <__udivmoddi4+0x212>
 8000bde:	ebb3 0208 	subs.w	r2, r3, r8
 8000be2:	eb61 010e 	sbc.w	r1, r1, lr
 8000be6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bea:	fa22 f306 	lsr.w	r3, r2, r6
 8000bee:	40f1      	lsrs	r1, r6
 8000bf0:	431f      	orrs	r7, r3
 8000bf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	40d8      	lsrs	r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	fa21 f303 	lsr.w	r3, r1, r3
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4301      	orrs	r1, r0
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c20:	0c0b      	lsrs	r3, r1, #16
 8000c22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c26:	fb00 f60e 	mul.w	r6, r0, lr
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x260>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b8>
 8000c3c:	429e      	cmp	r6, r3
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b8>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	b289      	uxth	r1, r1
 8000c48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb06 f30e 	mul.w	r3, r6, lr
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x28a>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c6a:	3e02      	subs	r6, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0x104>
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e705      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e3      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6f8      	b.n	8000a76 <__udivmoddi4+0x92>
 8000c84:	454b      	cmp	r3, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f8>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f8>
 8000c94:	4646      	mov	r6, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x28a>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1e2>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x260>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b8>
 8000ca4:	3b02      	subs	r3, #2
 8000ca6:	4461      	add	r1, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x12c>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e709      	b.n	8000ac2 <__udivmoddi4+0xde>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x156>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbe:	f000 fbf1 	bl	80014a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc2:	f000 f80f 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc6:	f000 f8f7 	bl	8000eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cca:	f000 f8d5 	bl	8000e78 <MX_DMA_Init>
  MX_ADC1_Init();
 8000cce:	f000 f873 	bl	8000db8 <MX_ADC1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  struct Diode ex_1;
	  readDiode(&ex_1);
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f94b 	bl	8000f70 <readDiode>
	  HAL_Delay(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 fc54 	bl	8001588 <HAL_Delay>
  {
 8000ce0:	e7f7      	b.n	8000cd2 <main+0x1a>
	...

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b094      	sub	sp, #80	; 0x50
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2230      	movs	r2, #48	; 0x30
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 fb86 	bl	8003404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	4a27      	ldr	r2, [pc, #156]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d16:	6413      	str	r3, [r2, #64]	; 0x40
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <SystemClock_Config+0xd0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d30:	4a20      	ldr	r2, [pc, #128]	; (8000db4 <SystemClock_Config+0xd0>)
 8000d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <SystemClock_Config+0xd0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d44:	2301      	movs	r3, #1
 8000d46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d58:	2319      	movs	r3, #25
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d5c:	23a8      	movs	r3, #168	; 0xa8
 8000d5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d64:	2304      	movs	r3, #4
 8000d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d68:	f107 0320 	add.w	r3, r7, #32
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 ff01 	bl	8002b74 <HAL_RCC_OscConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d78:	f000 fa7e 	bl	8001278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d80:	2302      	movs	r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2102      	movs	r1, #2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 f963 	bl	8003064 <HAL_RCC_ClockConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000da4:	f000 fa68 	bl	8001278 <Error_Handler>
  }
}
 8000da8:	bf00      	nop
 8000daa:	3750      	adds	r7, #80	; 0x50
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40007000 	.word	0x40007000

08000db8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dca:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000dcc:	4a28      	ldr	r2, [pc, #160]	; (8000e70 <MX_ADC1_Init+0xb8>)
 8000dce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000dd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000dfa:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <MX_ADC1_Init+0xbc>)
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000e06:	2202      	movs	r2, #2
 8000e08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e18:	4814      	ldr	r0, [pc, #80]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000e1a:	f000 fbd9 	bl	80015d0 <HAL_ADC_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e24:	f000 fa28 	bl	8001278 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e30:	2307      	movs	r3, #7
 8000e32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e34:	463b      	mov	r3, r7
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000e3a:	f000 fd6b 	bl	8001914 <HAL_ADC_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e44:	f000 fa18 	bl	8001278 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_ADC1_Init+0xb4>)
 8000e56:	f000 fd5d 	bl	8001914 <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e60:	f000 fa0a 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000030 	.word	0x20000030
 8000e70:	40012000 	.word	0x40012000
 8000e74:	0f000001 	.word	0x0f000001

08000e78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_DMA_Init+0x3c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <MX_DMA_Init+0x3c>)
 8000e88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_DMA_Init+0x3c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2038      	movs	r0, #56	; 0x38
 8000ea0:	f001 f8b3 	bl	800200a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ea4:	2038      	movs	r0, #56	; 0x38
 8000ea6:	f001 f8cc 	bl	8002042 <HAL_NVIC_EnableIRQ>

}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_GPIO_Init+0x7c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <MX_GPIO_Init+0x7c>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_GPIO_Init+0x7c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_GPIO_Init+0x7c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <MX_GPIO_Init+0x7c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_GPIO_Init+0x7c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, a4700_Pin|a220_Pin|b4700_Pin|b220_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	212d      	movs	r1, #45	; 0x2d
 8000f0a:	480b      	ldr	r0, [pc, #44]	; (8000f38 <MX_GPIO_Init+0x80>)
 8000f0c:	f001 fe18 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : a4700_Pin a220_Pin b4700_Pin b220_Pin */
  GPIO_InitStruct.Pin = a4700_Pin|a220_Pin|b4700_Pin|b220_Pin;
 8000f10:	232d      	movs	r3, #45	; 0x2d
 8000f12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	4619      	mov	r1, r3
 8000f26:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_GPIO_Init+0x80>)
 8000f28:	f001 fc86 	bl	8002838 <HAL_GPIO_Init>

}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000

08000f3c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1){
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_ADC_ConvCpltCallback+0x28>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d105      	bne.n	8000f5a <HAL_ADC_ConvCpltCallback+0x1e>
	  HAL_ADC_Stop_DMA(&hadc1);
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000f50:	f000 fc72 	bl	8001838 <HAL_ADC_Stop_DMA>
	  adcReady = true;
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x30>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40012000 	.word	0x40012000
 8000f68:	20000030 	.word	0x20000030
 8000f6c:	200000dc 	.word	0x200000dc

08000f70 <readDiode>:

void readDiode(struct Diode * diode){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	 */
	GPIO_InitTypeDef GPIO_InitStruct;

	//first step
	//	set both of voltage set pin at 1
	GPIO_InitStruct.Pin = a4700_Pin;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(a4700_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4619      	mov	r1, r3
 8000f8a:	48b5      	ldr	r0, [pc, #724]	; (8001260 <readDiode+0x2f0>)
 8000f8c:	f001 fc54 	bl	8002838 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(a4700_GPIO_Port, a4700_Pin, 1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2101      	movs	r1, #1
 8000f94:	48b2      	ldr	r0, [pc, #712]	; (8001260 <readDiode+0x2f0>)
 8000f96:	f001 fdd3 	bl	8002b40 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = a220_Pin;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(a220_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	4619      	mov	r1, r3
 8000fac:	48ac      	ldr	r0, [pc, #688]	; (8001260 <readDiode+0x2f0>)
 8000fae:	f001 fc43 	bl	8002838 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(a220_GPIO_Port, a220_Pin, 1);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	48aa      	ldr	r0, [pc, #680]	; (8001260 <readDiode+0x2f0>)
 8000fb8:	f001 fdc2 	bl	8002b40 <HAL_GPIO_WritePin>

	//	set b4700 as ouput 0 and b220 at Hi-z mode

	GPIO_InitStruct.Pin = b4700_Pin;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(b4700_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4619      	mov	r1, r3
 8000fce:	48a4      	ldr	r0, [pc, #656]	; (8001260 <readDiode+0x2f0>)
 8000fd0:	f001 fc32 	bl	8002838 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(b4700_GPIO_Port, b4700_Pin, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	48a1      	ldr	r0, [pc, #644]	; (8001260 <readDiode+0x2f0>)
 8000fda:	f001 fdb1 	bl	8002b40 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = b220_Pin;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(b220_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4619      	mov	r1, r3
 8000ff0:	489b      	ldr	r0, [pc, #620]	; (8001260 <readDiode+0x2f0>)
 8000ff2:	f001 fc21 	bl	8002838 <HAL_GPIO_Init>

	//read ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_values, CountADC);
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	499a      	ldr	r1, [pc, #616]	; (8001264 <readDiode+0x2f4>)
 8000ffa:	489b      	ldr	r0, [pc, #620]	; (8001268 <readDiode+0x2f8>)
 8000ffc:	f000 fb2c 	bl	8001658 <HAL_ADC_Start_DMA>
	while(!adcReady){}	//wait for end adc conversion
 8001000:	bf00      	nop
 8001002:	4b9a      	ldr	r3, [pc, #616]	; (800126c <readDiode+0x2fc>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	f083 0301 	eor.w	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f8      	bne.n	8001002 <readDiode+0x92>
	adcReady = false;
 8001010:	4b96      	ldr	r3, [pc, #600]	; (800126c <readDiode+0x2fc>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]

	uint16_t amperage1 = Vref*adc_values[1]*1000000/4095/BRref1; //Calculate amperage through diode in nA
 8001016:	4b93      	ldr	r3, [pc, #588]	; (8001264 <readDiode+0x2f4>)
 8001018:	885b      	ldrh	r3, [r3, #2]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa2e 	bl	800047c <__aeabi_i2d>
 8001020:	4b93      	ldr	r3, [pc, #588]	; (8001270 <readDiode+0x300>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff fa93 	bl	8000550 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	a383      	add	r3, pc, #524	; (adr r3, 8001240 <readDiode+0x2d0>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f7ff fa8a 	bl	8000550 <__aeabi_dmul>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	a380      	add	r3, pc, #512	; (adr r3, 8001248 <readDiode+0x2d8>)
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	f7ff fbab 	bl	80007a4 <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	a37e      	add	r3, pc, #504	; (adr r3, 8001250 <readDiode+0x2e0>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff fba2 	bl	80007a4 <__aeabi_ddiv>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fc84 	bl	8000974 <__aeabi_d2uiz>
 800106c:	4603      	mov	r3, r0
 800106e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t voltage1 = Vref*(adc_values[0]-adc_values[1])/4095*1000;
 8001070:	4b7c      	ldr	r3, [pc, #496]	; (8001264 <readDiode+0x2f4>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b7b      	ldr	r3, [pc, #492]	; (8001264 <readDiode+0x2f4>)
 8001078:	885b      	ldrh	r3, [r3, #2]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f9fd 	bl	800047c <__aeabi_i2d>
 8001082:	4b7b      	ldr	r3, [pc, #492]	; (8001270 <readDiode+0x300>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff fa62 	bl	8000550 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	a36c      	add	r3, pc, #432	; (adr r3, 8001248 <readDiode+0x2d8>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	f7ff fb83 	bl	80007a4 <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	4b72      	ldr	r3, [pc, #456]	; (8001274 <readDiode+0x304>)
 80010ac:	f7ff fa50 	bl	8000550 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	f7ff fc5c 	bl	8000974 <__aeabi_d2uiz>
 80010bc:	4603      	mov	r3, r0
 80010be:	84bb      	strh	r3, [r7, #36]	; 0x24

	//second step
	//	set a4700 as ouput 0 and a220 at Hi-z mode
	HAL_GPIO_WritePin(a4700_GPIO_Port, a4700_Pin, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2101      	movs	r1, #1
 80010c4:	4866      	ldr	r0, [pc, #408]	; (8001260 <readDiode+0x2f0>)
 80010c6:	f001 fd3b 	bl	8002b40 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = a220_Pin;
 80010ca:	2304      	movs	r3, #4
 80010cc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(a220_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	4619      	mov	r1, r3
 80010dc:	4860      	ldr	r0, [pc, #384]	; (8001260 <readDiode+0x2f0>)
 80010de:	f001 fbab 	bl	8002838 <HAL_GPIO_Init>

	//	set b4700 as ouput 0 and b220 at Hi-z mode

	HAL_GPIO_WritePin(b4700_GPIO_Port, b4700_Pin, 1);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2108      	movs	r1, #8
 80010e6:	485e      	ldr	r0, [pc, #376]	; (8001260 <readDiode+0x2f0>)
 80010e8:	f001 fd2a 	bl	8002b40 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = b220_Pin;
 80010ec:	2320      	movs	r3, #32
 80010ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(b220_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	4858      	ldr	r0, [pc, #352]	; (8001260 <readDiode+0x2f0>)
 8001100:	f001 fb9a 	bl	8002838 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(b220_GPIO_Port, b220_Pin, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	2120      	movs	r1, #32
 8001108:	4855      	ldr	r0, [pc, #340]	; (8001260 <readDiode+0x2f0>)
 800110a:	f001 fd19 	bl	8002b40 <HAL_GPIO_WritePin>

	//read ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_values, CountADC);
 800110e:	2202      	movs	r2, #2
 8001110:	4954      	ldr	r1, [pc, #336]	; (8001264 <readDiode+0x2f4>)
 8001112:	4855      	ldr	r0, [pc, #340]	; (8001268 <readDiode+0x2f8>)
 8001114:	f000 faa0 	bl	8001658 <HAL_ADC_Start_DMA>
	while(!adcReady){}	//wait for end adc conversion
 8001118:	bf00      	nop
 800111a:	4b54      	ldr	r3, [pc, #336]	; (800126c <readDiode+0x2fc>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	f083 0301 	eor.w	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f8      	bne.n	800111a <readDiode+0x1aa>
	adcReady = false;
 8001128:	4b50      	ldr	r3, [pc, #320]	; (800126c <readDiode+0x2fc>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]

	uint16_t amperage2 = Vref*adc_values[0]*1000000/4095/ARref1; //Calculate amperage through diode
 800112e:	4b4d      	ldr	r3, [pc, #308]	; (8001264 <readDiode+0x2f4>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f9a2 	bl	800047c <__aeabi_i2d>
 8001138:	4b4d      	ldr	r3, [pc, #308]	; (8001270 <readDiode+0x300>)
 800113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113e:	f7ff fa07 	bl	8000550 <__aeabi_dmul>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	a33d      	add	r3, pc, #244	; (adr r3, 8001240 <readDiode+0x2d0>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff f9fe 	bl	8000550 <__aeabi_dmul>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	a33a      	add	r3, pc, #232	; (adr r3, 8001248 <readDiode+0x2d8>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fb1f 	bl	80007a4 <__aeabi_ddiv>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	a33a      	add	r3, pc, #232	; (adr r3, 8001258 <readDiode+0x2e8>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff fb16 	bl	80007a4 <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fbf8 	bl	8000974 <__aeabi_d2uiz>
 8001184:	4603      	mov	r3, r0
 8001186:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t voltage2 = Vref*(adc_values[1]-adc_values[0])/4095*1000;
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <readDiode+0x2f4>)
 800118a:	885b      	ldrh	r3, [r3, #2]
 800118c:	461a      	mov	r2, r3
 800118e:	4b35      	ldr	r3, [pc, #212]	; (8001264 <readDiode+0x2f4>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f971 	bl	800047c <__aeabi_i2d>
 800119a:	4b35      	ldr	r3, [pc, #212]	; (8001270 <readDiode+0x300>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff f9d6 	bl	8000550 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	a326      	add	r3, pc, #152	; (adr r3, 8001248 <readDiode+0x2d8>)
 80011ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b2:	f7ff faf7 	bl	80007a4 <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <readDiode+0x304>)
 80011c4:	f7ff f9c4 	bl	8000550 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fbd0 	bl	8000974 <__aeabi_d2uiz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	843b      	strh	r3, [r7, #32]

	if (amperage1 < minAmp && amperage2 < minAmp){
 80011d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011da:	2b63      	cmp	r3, #99	; 0x63
 80011dc:	d806      	bhi.n	80011ec <readDiode+0x27c>
 80011de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011e0:	2b63      	cmp	r3, #99	; 0x63
 80011e2:	d803      	bhi.n	80011ec <readDiode+0x27c>
		diode->Direction = '0';	//
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2230      	movs	r2, #48	; 0x30
 80011e8:	711a      	strb	r2, [r3, #4]
	}else{
		diode->Vopen_directly = voltage1;
		diode->Vopen_back = voltage2;
		diode->Direction = 'z';		//zenner's diode
	}
}
 80011ea:	e024      	b.n	8001236 <readDiode+0x2c6>
	} else if(amperage1 < minAmp){
 80011ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011ee:	2b63      	cmp	r3, #99	; 0x63
 80011f0:	d80a      	bhi.n	8001208 <readDiode+0x298>
		diode->Vopen_directly = voltage2;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	8c3a      	ldrh	r2, [r7, #32]
 80011f6:	801a      	strh	r2, [r3, #0]
		diode->Vopen_back = 9999;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80011fe:	805a      	strh	r2, [r3, #2]
		diode->Direction = 'l';
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	226c      	movs	r2, #108	; 0x6c
 8001204:	711a      	strb	r2, [r3, #4]
}
 8001206:	e016      	b.n	8001236 <readDiode+0x2c6>
	}else if (amperage2 < minAmp){
 8001208:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800120a:	2b63      	cmp	r3, #99	; 0x63
 800120c:	d80a      	bhi.n	8001224 <readDiode+0x2b4>
		diode->Vopen_directly = voltage1;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001212:	801a      	strh	r2, [r3, #0]
		diode->Vopen_back = 9999;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f242 720f 	movw	r2, #9999	; 0x270f
 800121a:	805a      	strh	r2, [r3, #2]
		diode->Direction = 'r';
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2272      	movs	r2, #114	; 0x72
 8001220:	711a      	strb	r2, [r3, #4]
}
 8001222:	e008      	b.n	8001236 <readDiode+0x2c6>
		diode->Vopen_directly = voltage1;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001228:	801a      	strh	r2, [r3, #0]
		diode->Vopen_back = voltage2;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	8c3a      	ldrh	r2, [r7, #32]
 800122e:	805a      	strh	r2, [r3, #2]
		diode->Direction = 'z';		//zenner's diode
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	227a      	movs	r2, #122	; 0x7a
 8001234:	711a      	strb	r2, [r3, #4]
}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	00000000 	.word	0x00000000
 8001244:	412e8480 	.word	0x412e8480
 8001248:	00000000 	.word	0x00000000
 800124c:	40affe00 	.word	0x40affe00
 8001250:	00000000 	.word	0x00000000
 8001254:	40b10800 	.word	0x40b10800
 8001258:	00000000 	.word	0x00000000
 800125c:	40b35600 	.word	0x40b35600
 8001260:	40020000 	.word	0x40020000
 8001264:	200000d8 	.word	0x200000d8
 8001268:	20000030 	.word	0x20000030
 800126c:	200000dc 	.word	0x200000dc
 8001270:	20000000 	.word	0x20000000
 8001274:	408f4000 	.word	0x408f4000

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001280:	e7fe      	b.n	8001280 <Error_Handler+0x8>
	...

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_MspInit+0x4c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <HAL_MspInit+0x4c>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_MspInit+0x4c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_MspInit+0x4c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_MspInit+0x4c>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_MspInit+0x4c>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800

080012d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a2f      	ldr	r2, [pc, #188]	; (80013b0 <HAL_ADC_MspInit+0xdc>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d157      	bne.n	80013a6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <HAL_ADC_MspInit+0xe0>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a2d      	ldr	r2, [pc, #180]	; (80013b4 <HAL_ADC_MspInit+0xe0>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <HAL_ADC_MspInit+0xe0>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <HAL_ADC_MspInit+0xe0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a26      	ldr	r2, [pc, #152]	; (80013b4 <HAL_ADC_MspInit+0xe0>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <HAL_ADC_MspInit+0xe0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800132e:	2312      	movs	r3, #18
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001332:	2303      	movs	r3, #3
 8001334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	481d      	ldr	r0, [pc, #116]	; (80013b8 <HAL_ADC_MspInit+0xe4>)
 8001342:	f001 fa79 	bl	8002838 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_ADC_MspInit+0xe8>)
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <HAL_ADC_MspInit+0xec>)
 800134a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_ADC_MspInit+0xe8>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_ADC_MspInit+0xe8>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_ADC_MspInit+0xe8>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <HAL_ADC_MspInit+0xe8>)
 8001360:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001364:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_ADC_MspInit+0xe8>)
 8001368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800136c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <HAL_ADC_MspInit+0xe8>)
 8001370:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001374:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_ADC_MspInit+0xe8>)
 8001378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_ADC_MspInit+0xe8>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <HAL_ADC_MspInit+0xe8>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800138a:	480c      	ldr	r0, [pc, #48]	; (80013bc <HAL_ADC_MspInit+0xe8>)
 800138c:	f000 fe74 	bl	8002078 <HAL_DMA_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001396:	f7ff ff6f 	bl	8001278 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_ADC_MspInit+0xe8>)
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <HAL_ADC_MspInit+0xe8>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40012000 	.word	0x40012000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	20000078 	.word	0x20000078
 80013c0:	40026410 	.word	0x40026410

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <NMI_Handler+0x4>

080013ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <MemManage_Handler+0x4>

080013d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f000 f89a 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <DMA2_Stream0_IRQHandler+0x10>)
 800141e:	f000 ffa1 	bl	8002364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000078 	.word	0x20000078

0800142c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <SystemInit+0x20>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <SystemInit+0x20>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001488 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001456:	490e      	ldr	r1, [pc, #56]	; (8001490 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800146c:	4c0b      	ldr	r4, [pc, #44]	; (800149c <LoopFillZerobss+0x26>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800147a:	f7ff ffd7 	bl	800142c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147e:	f001 ff9d 	bl	80033bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001482:	f7ff fc19 	bl	8000cb8 <main>
  bx  lr    
 8001486:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001488:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001494:	08003454 	.word	0x08003454
  ldr r2, =_sbss
 8001498:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800149c:	200000e4 	.word	0x200000e4

080014a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <HAL_Init+0x40>)
 80014ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_Init+0x40>)
 80014ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_Init+0x40>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 fd91 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d2:	200f      	movs	r0, #15
 80014d4:	f000 f808 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d8:	f7ff fed4 	bl	8001284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023c00 	.word	0x40023c00

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x54>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x58>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fda9 	bl	800205e <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 fd71 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <HAL_InitTick+0x5c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000008 	.word	0x20000008
 8001540:	20000010 	.word	0x20000010
 8001544:	2000000c 	.word	0x2000000c

08001548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000010 	.word	0x20000010
 800156c:	200000e0 	.word	0x200000e0

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	200000e0 	.word	0x200000e0

08001588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff ffee 	bl	8001570 <HAL_GetTick>
 8001594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d005      	beq.n	80015ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_Delay+0x44>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ae:	bf00      	nop
 80015b0:	f7ff ffde 	bl	8001570 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d8f7      	bhi.n	80015b0 <HAL_Delay+0x28>
  {
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000010 	.word	0x20000010

080015d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e033      	b.n	800164e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fe70 	bl	80012d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	d118      	bne.n	8001640 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001616:	f023 0302 	bic.w	r3, r3, #2
 800161a:	f043 0202 	orr.w	r2, r3, #2
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 fa98 	bl	8001b58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f023 0303 	bic.w	r3, r3, #3
 8001636:	f043 0201 	orr.w	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
 800163e:	e001      	b.n	8001644 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800166e:	2b01      	cmp	r3, #1
 8001670:	d101      	bne.n	8001676 <HAL_ADC_Start_DMA+0x1e>
 8001672:	2302      	movs	r3, #2
 8001674:	e0ce      	b.n	8001814 <HAL_ADC_Start_DMA+0x1bc>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b01      	cmp	r3, #1
 800168a:	d018      	beq.n	80016be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800169c:	4b5f      	ldr	r3, [pc, #380]	; (800181c <HAL_ADC_Start_DMA+0x1c4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a5f      	ldr	r2, [pc, #380]	; (8001820 <HAL_ADC_Start_DMA+0x1c8>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	0c9a      	lsrs	r2, r3, #18
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016b0:	e002      	b.n	80016b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f9      	bne.n	80016b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016cc:	d107      	bne.n	80016de <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	f040 8086 	bne.w	80017fa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016f6:	f023 0301 	bic.w	r3, r3, #1
 80016fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170c:	2b00      	cmp	r3, #0
 800170e:	d007      	beq.n	8001720 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001718:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800172c:	d106      	bne.n	800173c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f023 0206 	bic.w	r2, r3, #6
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	645a      	str	r2, [r3, #68]	; 0x44
 800173a:	e002      	b.n	8001742 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800174a:	4b36      	ldr	r3, [pc, #216]	; (8001824 <HAL_ADC_Start_DMA+0x1cc>)
 800174c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001752:	4a35      	ldr	r2, [pc, #212]	; (8001828 <HAL_ADC_Start_DMA+0x1d0>)
 8001754:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175a:	4a34      	ldr	r2, [pc, #208]	; (800182c <HAL_ADC_Start_DMA+0x1d4>)
 800175c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001762:	4a33      	ldr	r2, [pc, #204]	; (8001830 <HAL_ADC_Start_DMA+0x1d8>)
 8001764:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800176e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800177e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800178e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	334c      	adds	r3, #76	; 0x4c
 800179a:	4619      	mov	r1, r3
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f000 fd18 	bl	80021d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10f      	bne.n	80017d0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d129      	bne.n	8001812 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	e020      	b.n	8001812 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a17      	ldr	r2, [pc, #92]	; (8001834 <HAL_ADC_Start_DMA+0x1dc>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d11b      	bne.n	8001812 <HAL_ADC_Start_DMA+0x1ba>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d114      	bne.n	8001812 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	e00b      	b.n	8001812 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f043 0210 	orr.w	r2, r3, #16
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f043 0201 	orr.w	r2, r3, #1
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000008 	.word	0x20000008
 8001820:	431bde83 	.word	0x431bde83
 8001824:	40012300 	.word	0x40012300
 8001828:	08001d51 	.word	0x08001d51
 800182c:	08001e0b 	.word	0x08001e0b
 8001830:	08001e27 	.word	0x08001e27
 8001834:	40012000 	.word	0x40012000

08001838 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_ADC_Stop_DMA+0x1a>
 800184e:	2302      	movs	r3, #2
 8001850:	e048      	b.n	80018e4 <HAL_ADC_Stop_DMA+0xac>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0201 	bic.w	r2, r2, #1
 8001868:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d130      	bne.n	80018da <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001886:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d10f      	bne.n	80018b6 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fcf2 	bl	8002284 <HAL_DMA_Abort>
 80018a0:	4603      	mov	r3, r0
 80018a2:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80018c4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	f043 0201 	orr.w	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x1c>
 800192c:	2302      	movs	r3, #2
 800192e:	e105      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x228>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b09      	cmp	r3, #9
 800193e:	d925      	bls.n	800198c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68d9      	ldr	r1, [r3, #12]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	b29b      	uxth	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	3b1e      	subs	r3, #30
 8001956:	2207      	movs	r2, #7
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43da      	mvns	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	400a      	ands	r2, r1
 8001964:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68d9      	ldr	r1, [r3, #12]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	4618      	mov	r0, r3
 8001978:	4603      	mov	r3, r0
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4403      	add	r3, r0
 800197e:	3b1e      	subs	r3, #30
 8001980:	409a      	lsls	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	e022      	b.n	80019d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6919      	ldr	r1, [r3, #16]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	461a      	mov	r2, r3
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	2207      	movs	r2, #7
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	400a      	ands	r2, r1
 80019ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6919      	ldr	r1, [r3, #16]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4403      	add	r3, r0
 80019c8:	409a      	lsls	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d824      	bhi.n	8001a24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	3b05      	subs	r3, #5
 80019ec:	221f      	movs	r2, #31
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	400a      	ands	r2, r1
 80019fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b05      	subs	r3, #5
 8001a16:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34
 8001a22:	e04c      	b.n	8001abe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b0c      	cmp	r3, #12
 8001a2a:	d824      	bhi.n	8001a76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3b23      	subs	r3, #35	; 0x23
 8001a3e:	221f      	movs	r2, #31
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43da      	mvns	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	3b23      	subs	r3, #35	; 0x23
 8001a68:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
 8001a74:	e023      	b.n	8001abe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	3b41      	subs	r3, #65	; 0x41
 8001a88:	221f      	movs	r2, #31
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	400a      	ands	r2, r1
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	3b41      	subs	r3, #65	; 0x41
 8001ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_ADC_ConfigChannel+0x234>)
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a21      	ldr	r2, [pc, #132]	; (8001b4c <HAL_ADC_ConfigChannel+0x238>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d109      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1cc>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b12      	cmp	r3, #18
 8001ad2:	d105      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a19      	ldr	r2, [pc, #100]	; (8001b4c <HAL_ADC_ConfigChannel+0x238>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d123      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x21e>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d003      	beq.n	8001afa <HAL_ADC_ConfigChannel+0x1e6>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b11      	cmp	r3, #17
 8001af8:	d11b      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	d111      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_ADC_ConfigChannel+0x23c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_ADC_ConfigChannel+0x240>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	0c9a      	lsrs	r2, r3, #18
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b24:	e002      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f9      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40012300 	.word	0x40012300
 8001b4c:	40012000 	.word	0x40012000
 8001b50:	20000008 	.word	0x20000008
 8001b54:	431bde83 	.word	0x431bde83

08001b58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b60:	4b79      	ldr	r3, [pc, #484]	; (8001d48 <ADC_Init+0x1f0>)
 8001b62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6859      	ldr	r1, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	021a      	lsls	r2, r3, #8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6899      	ldr	r1, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <ADC_Init+0x1f4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d022      	beq.n	8001c36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6899      	ldr	r1, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6899      	ldr	r1, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	e00f      	b.n	8001c56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0202 	bic.w	r2, r2, #2
 8001c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6899      	ldr	r1, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7e1b      	ldrb	r3, [r3, #24]
 8001c70:	005a      	lsls	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01b      	beq.n	8001cbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ca2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6859      	ldr	r1, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	035a      	lsls	r2, r3, #13
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	e007      	b.n	8001ccc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	051a      	lsls	r2, r3, #20
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6899      	ldr	r1, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d0e:	025a      	lsls	r2, r3, #9
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6899      	ldr	r1, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	029a      	lsls	r2, r3, #10
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	609a      	str	r2, [r3, #8]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40012300 	.word	0x40012300
 8001d4c:	0f000001 	.word	0x0f000001

08001d50 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d13c      	bne.n	8001de4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d12b      	bne.n	8001ddc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d127      	bne.n	8001ddc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d006      	beq.n	8001da8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d119      	bne.n	8001ddc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0220 	bic.w	r2, r2, #32
 8001db6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7ff f8ad 	bl	8000f3c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001de2:	e00e      	b.n	8001e02 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7ff fd85 	bl	8001900 <HAL_ADC_ErrorCallback>
}
 8001df6:	e004      	b.n	8001e02 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	4798      	blx	r3
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f7ff fd67 	bl	80018ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e32:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f043 0204 	orr.w	r2, r3, #4
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f7ff fd5a 	bl	8001900 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	; (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f7ff ff8e 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff29 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff3e 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff8e 	bl	8001f48 <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5d 	bl	8001ef4 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff31 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffa2 	bl	8001fb0 <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff fa74 	bl	8001570 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e099      	b.n	80021c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0201 	bic.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020b4:	e00f      	b.n	80020d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020b6:	f7ff fa5b 	bl	8001570 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d908      	bls.n	80020d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2220      	movs	r2, #32
 80020c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2203      	movs	r2, #3
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e078      	b.n	80021c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e8      	bne.n	80020b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <HAL_DMA_Init+0x158>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002102:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	2b04      	cmp	r3, #4
 800212e:	d107      	bne.n	8002140 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	4313      	orrs	r3, r2
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f023 0307 	bic.w	r3, r3, #7
 8002156:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	2b04      	cmp	r3, #4
 8002168:	d117      	bne.n	800219a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4313      	orrs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00e      	beq.n	800219a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 fadf 	bl	8002740 <DMA_CheckFifoParam>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2240      	movs	r2, #64	; 0x40
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002196:	2301      	movs	r3, #1
 8002198:	e016      	b.n	80021c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fa96 	bl	80026d4 <DMA_CalcBaseAndBitshift>
 80021a8:	4603      	mov	r3, r0
 80021aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	223f      	movs	r2, #63	; 0x3f
 80021b2:	409a      	lsls	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	f010803f 	.word	0xf010803f

080021d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_DMA_Start_IT+0x26>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e040      	b.n	800227c <HAL_DMA_Start_IT+0xa8>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d12f      	bne.n	800226e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2202      	movs	r2, #2
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 fa28 	bl	8002678 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	223f      	movs	r2, #63	; 0x3f
 800222e:	409a      	lsls	r2, r3
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0216 	orr.w	r2, r2, #22
 8002242:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0208 	orr.w	r2, r2, #8
 800225a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	e005      	b.n	800227a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002276:	2302      	movs	r3, #2
 8002278:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800227a:	7dfb      	ldrb	r3, [r7, #23]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002292:	f7ff f96d 	bl	8001570 <HAL_GetTick>
 8002296:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d008      	beq.n	80022b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2280      	movs	r2, #128	; 0x80
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e052      	b.n	800235c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0216 	bic.w	r2, r2, #22
 80022c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d103      	bne.n	80022e6 <HAL_DMA_Abort+0x62>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d007      	beq.n	80022f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0208 	bic.w	r2, r2, #8
 80022f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0201 	bic.w	r2, r2, #1
 8002304:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002306:	e013      	b.n	8002330 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002308:	f7ff f932 	bl	8001570 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b05      	cmp	r3, #5
 8002314:	d90c      	bls.n	8002330 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2203      	movs	r2, #3
 8002320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e015      	b.n	800235c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1e4      	bne.n	8002308 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	223f      	movs	r2, #63	; 0x3f
 8002344:	409a      	lsls	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002370:	4b8e      	ldr	r3, [pc, #568]	; (80025ac <HAL_DMA_IRQHandler+0x248>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a8e      	ldr	r2, [pc, #568]	; (80025b0 <HAL_DMA_IRQHandler+0x24c>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	0a9b      	lsrs	r3, r3, #10
 800237c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	2208      	movs	r2, #8
 8002390:	409a      	lsls	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d01a      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0204 	bic.w	r2, r2, #4
 80023b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	2208      	movs	r2, #8
 80023be:	409a      	lsls	r2, r3
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d4:	2201      	movs	r2, #1
 80023d6:	409a      	lsls	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d012      	beq.n	8002406 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	2201      	movs	r2, #1
 80023f4:	409a      	lsls	r2, r3
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	f043 0202 	orr.w	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	2204      	movs	r2, #4
 800240c:	409a      	lsls	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4013      	ands	r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d012      	beq.n	800243c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00b      	beq.n	800243c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2204      	movs	r2, #4
 800242a:	409a      	lsls	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f043 0204 	orr.w	r2, r3, #4
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	2210      	movs	r2, #16
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d043      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d03c      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245e:	2210      	movs	r2, #16
 8002460:	409a      	lsls	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d018      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d108      	bne.n	8002494 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d024      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	4798      	blx	r3
 8002492:	e01f      	b.n	80024d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01b      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	4798      	blx	r3
 80024a4:	e016      	b.n	80024d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d107      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0208 	bic.w	r2, r2, #8
 80024c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d8:	2220      	movs	r2, #32
 80024da:	409a      	lsls	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 808f 	beq.w	8002604 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8087 	beq.w	8002604 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	2220      	movs	r2, #32
 80024fc:	409a      	lsls	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b05      	cmp	r3, #5
 800250c:	d136      	bne.n	800257c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0216 	bic.w	r2, r2, #22
 800251c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800252c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <HAL_DMA_IRQHandler+0x1da>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0208 	bic.w	r2, r2, #8
 800254c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	223f      	movs	r2, #63	; 0x3f
 8002554:	409a      	lsls	r2, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256e:	2b00      	cmp	r3, #0
 8002570:	d07e      	beq.n	8002670 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	4798      	blx	r3
        }
        return;
 800257a:	e079      	b.n	8002670 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d01d      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10d      	bne.n	80025b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	2b00      	cmp	r3, #0
 800259e:	d031      	beq.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	4798      	blx	r3
 80025a8:	e02c      	b.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
 80025aa:	bf00      	nop
 80025ac:	20000008 	.word	0x20000008
 80025b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d023      	beq.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4798      	blx	r3
 80025c4:	e01e      	b.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10f      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0210 	bic.w	r2, r2, #16
 80025e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	2b00      	cmp	r3, #0
 800260a:	d032      	beq.n	8002672 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d022      	beq.n	800265e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2205      	movs	r2, #5
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	3301      	adds	r3, #1
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	429a      	cmp	r2, r3
 800263a:	d307      	bcc.n	800264c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f2      	bne.n	8002630 <HAL_DMA_IRQHandler+0x2cc>
 800264a:	e000      	b.n	800264e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800264c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
 800266e:	e000      	b.n	8002672 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002670:	bf00      	nop
    }
  }
}
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002694:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d108      	bne.n	80026b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026b6:	e007      	b.n	80026c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	60da      	str	r2, [r3, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	3b10      	subs	r3, #16
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <DMA_CalcBaseAndBitshift+0x64>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ee:	4a13      	ldr	r2, [pc, #76]	; (800273c <DMA_CalcBaseAndBitshift+0x68>)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4413      	add	r3, r2
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d909      	bls.n	8002716 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	1d1a      	adds	r2, r3, #4
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	659a      	str	r2, [r3, #88]	; 0x58
 8002714:	e007      	b.n	8002726 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800271e:	f023 0303 	bic.w	r3, r3, #3
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	aaaaaaab 	.word	0xaaaaaaab
 800273c:	0800343c 	.word	0x0800343c

08002740 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d11f      	bne.n	800279a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d856      	bhi.n	800280e <DMA_CheckFifoParam+0xce>
 8002760:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <DMA_CheckFifoParam+0x28>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	08002779 	.word	0x08002779
 800276c:	0800278b 	.word	0x0800278b
 8002770:	08002779 	.word	0x08002779
 8002774:	0800280f 	.word	0x0800280f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d046      	beq.n	8002812 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002788:	e043      	b.n	8002812 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002792:	d140      	bne.n	8002816 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002798:	e03d      	b.n	8002816 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a2:	d121      	bne.n	80027e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d837      	bhi.n	800281a <DMA_CheckFifoParam+0xda>
 80027aa:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <DMA_CheckFifoParam+0x70>)
 80027ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b0:	080027c1 	.word	0x080027c1
 80027b4:	080027c7 	.word	0x080027c7
 80027b8:	080027c1 	.word	0x080027c1
 80027bc:	080027d9 	.word	0x080027d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      break;
 80027c4:	e030      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d025      	beq.n	800281e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d6:	e022      	b.n	800281e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027e0:	d11f      	bne.n	8002822 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027e6:	e01c      	b.n	8002822 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d903      	bls.n	80027f6 <DMA_CheckFifoParam+0xb6>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d003      	beq.n	80027fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027f4:	e018      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
      break;
 80027fa:	e015      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00e      	beq.n	8002826 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      break;
 800280c:	e00b      	b.n	8002826 <DMA_CheckFifoParam+0xe6>
      break;
 800280e:	bf00      	nop
 8002810:	e00a      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 8002812:	bf00      	nop
 8002814:	e008      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 8002816:	bf00      	nop
 8002818:	e006      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 800281a:	bf00      	nop
 800281c:	e004      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 800281e:	bf00      	nop
 8002820:	e002      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;   
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 8002826:	bf00      	nop
    }
  } 
  
  return status; 
 8002828:	7bfb      	ldrb	r3, [r7, #15]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop

08002838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e159      	b.n	8002b08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8148 	bne.w	8002b02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d005      	beq.n	800288a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002886:	2b02      	cmp	r3, #2
 8002888:	d130      	bne.n	80028ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 0201 	and.w	r2, r3, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d017      	beq.n	8002928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d123      	bne.n	800297c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	08da      	lsrs	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3208      	adds	r2, #8
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	220f      	movs	r2, #15
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a2 	beq.w	8002b02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b57      	ldr	r3, [pc, #348]	; (8002b20 <HAL_GPIO_Init+0x2e8>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	4a56      	ldr	r2, [pc, #344]	; (8002b20 <HAL_GPIO_Init+0x2e8>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029cc:	6453      	str	r3, [r2, #68]	; 0x44
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <HAL_GPIO_Init+0x2e8>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029da:	4a52      	ldr	r2, [pc, #328]	; (8002b24 <HAL_GPIO_Init+0x2ec>)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	220f      	movs	r2, #15
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a49      	ldr	r2, [pc, #292]	; (8002b28 <HAL_GPIO_Init+0x2f0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d019      	beq.n	8002a3a <HAL_GPIO_Init+0x202>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a48      	ldr	r2, [pc, #288]	; (8002b2c <HAL_GPIO_Init+0x2f4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_GPIO_Init+0x1fe>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a47      	ldr	r2, [pc, #284]	; (8002b30 <HAL_GPIO_Init+0x2f8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00d      	beq.n	8002a32 <HAL_GPIO_Init+0x1fa>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a46      	ldr	r2, [pc, #280]	; (8002b34 <HAL_GPIO_Init+0x2fc>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <HAL_GPIO_Init+0x1f6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a45      	ldr	r2, [pc, #276]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_GPIO_Init+0x1f2>
 8002a26:	2304      	movs	r3, #4
 8002a28:	e008      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e004      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e002      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	f002 0203 	and.w	r2, r2, #3
 8002a42:	0092      	lsls	r2, r2, #2
 8002a44:	4093      	lsls	r3, r2
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a4c:	4935      	ldr	r1, [pc, #212]	; (8002b24 <HAL_GPIO_Init+0x2ec>)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3302      	adds	r3, #2
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a5a:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a7e:	4a2f      	ldr	r2, [pc, #188]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a84:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa8:	4a24      	ldr	r2, [pc, #144]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aae:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ad2:	4a1a      	ldr	r2, [pc, #104]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad8:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002afc:	4a0f      	ldr	r2, [pc, #60]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3301      	adds	r3, #1
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	f67f aea2 	bls.w	8002854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	3724      	adds	r7, #36	; 0x24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40013800 	.word	0x40013800
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	40020800 	.word	0x40020800
 8002b34:	40020c00 	.word	0x40020c00
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40013c00 	.word	0x40013c00

08002b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	807b      	strh	r3, [r7, #2]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b50:	787b      	ldrb	r3, [r7, #1]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b5c:	e003      	b.n	8002b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	041a      	lsls	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	619a      	str	r2, [r3, #24]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e267      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d075      	beq.n	8002c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b92:	4b88      	ldr	r3, [pc, #544]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d00c      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9e:	4b85      	ldr	r3, [pc, #532]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d112      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002baa:	4b82      	ldr	r3, [pc, #520]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	4b7e      	ldr	r3, [pc, #504]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d05b      	beq.n	8002c7c <HAL_RCC_OscConfig+0x108>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d157      	bne.n	8002c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e242      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd8:	d106      	bne.n	8002be8 <HAL_RCC_OscConfig+0x74>
 8002bda:	4b76      	ldr	r3, [pc, #472]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a75      	ldr	r2, [pc, #468]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e01d      	b.n	8002c24 <HAL_RCC_OscConfig+0xb0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x98>
 8002bf2:	4b70      	ldr	r3, [pc, #448]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a6f      	ldr	r2, [pc, #444]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b6d      	ldr	r3, [pc, #436]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6c      	ldr	r2, [pc, #432]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0xb0>
 8002c0c:	4b69      	ldr	r3, [pc, #420]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a68      	ldr	r2, [pc, #416]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b66      	ldr	r3, [pc, #408]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a65      	ldr	r2, [pc, #404]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fca0 	bl	8001570 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c34:	f7fe fc9c 	bl	8001570 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e207      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b5b      	ldr	r3, [pc, #364]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0xc0>
 8002c52:	e014      	b.n	8002c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fe fc8c 	bl	8001570 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fc88 	bl	8001570 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e1f3      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6e:	4b51      	ldr	r3, [pc, #324]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0xe8>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d063      	beq.n	8002d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c8a:	4b4a      	ldr	r3, [pc, #296]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c96:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d11c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca2:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d116      	bne.n	8002cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cae:	4b41      	ldr	r3, [pc, #260]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x152>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e1c7      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc6:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4937      	ldr	r1, [pc, #220]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	e03a      	b.n	8002d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d020      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce4:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <HAL_RCC_OscConfig+0x244>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cea:	f7fe fc41 	bl	8001570 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf2:	f7fe fc3d 	bl	8001570 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e1a8      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4925      	ldr	r1, [pc, #148]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	600b      	str	r3, [r1, #0]
 8002d24:	e015      	b.n	8002d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d26:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <HAL_RCC_OscConfig+0x244>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fc20 	bl	8001570 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d34:	f7fe fc1c 	bl	8001570 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e187      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d46:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d036      	beq.n	8002dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d016      	beq.n	8002d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <HAL_RCC_OscConfig+0x248>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6c:	f7fe fc00 	bl	8001570 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d74:	f7fe fbfc 	bl	8001570 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e167      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x200>
 8002d92:	e01b      	b.n	8002dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <HAL_RCC_OscConfig+0x248>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fbe9 	bl	8001570 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da0:	e00e      	b.n	8002dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da2:	f7fe fbe5 	bl	8001570 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d907      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e150      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
 8002db4:	40023800 	.word	0x40023800
 8002db8:	42470000 	.word	0x42470000
 8002dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc0:	4b88      	ldr	r3, [pc, #544]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1ea      	bne.n	8002da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 8097 	beq.w	8002f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dde:	4b81      	ldr	r3, [pc, #516]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10f      	bne.n	8002e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	4b7d      	ldr	r3, [pc, #500]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a7c      	ldr	r2, [pc, #496]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfa:	4b7a      	ldr	r3, [pc, #488]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e06:	2301      	movs	r3, #1
 8002e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0a:	4b77      	ldr	r3, [pc, #476]	; (8002fe8 <HAL_RCC_OscConfig+0x474>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d118      	bne.n	8002e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e16:	4b74      	ldr	r3, [pc, #464]	; (8002fe8 <HAL_RCC_OscConfig+0x474>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a73      	ldr	r2, [pc, #460]	; (8002fe8 <HAL_RCC_OscConfig+0x474>)
 8002e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e22:	f7fe fba5 	bl	8001570 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2a:	f7fe fba1 	bl	8001570 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e10c      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	4b6a      	ldr	r3, [pc, #424]	; (8002fe8 <HAL_RCC_OscConfig+0x474>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_OscConfig+0x2ea>
 8002e50:	4b64      	ldr	r3, [pc, #400]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	4a63      	ldr	r2, [pc, #396]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5c:	e01c      	b.n	8002e98 <HAL_RCC_OscConfig+0x324>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x30c>
 8002e66:	4b5f      	ldr	r3, [pc, #380]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	4a5e      	ldr	r2, [pc, #376]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	6713      	str	r3, [r2, #112]	; 0x70
 8002e72:	4b5c      	ldr	r3, [pc, #368]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a5b      	ldr	r2, [pc, #364]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	e00b      	b.n	8002e98 <HAL_RCC_OscConfig+0x324>
 8002e80:	4b58      	ldr	r3, [pc, #352]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	4a57      	ldr	r2, [pc, #348]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8c:	4b55      	ldr	r3, [pc, #340]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a54      	ldr	r2, [pc, #336]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e92:	f023 0304 	bic.w	r3, r3, #4
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d015      	beq.n	8002ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7fe fb66 	bl	8001570 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea6:	e00a      	b.n	8002ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea8:	f7fe fb62 	bl	8001570 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e0cb      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebe:	4b49      	ldr	r3, [pc, #292]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0ee      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x334>
 8002eca:	e014      	b.n	8002ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ecc:	f7fe fb50 	bl	8001570 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed4:	f7fe fb4c 	bl	8001570 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e0b5      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eea:	4b3e      	ldr	r3, [pc, #248]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1ee      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef6:	7dfb      	ldrb	r3, [r7, #23]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d105      	bne.n	8002f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efc:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	4a38      	ldr	r2, [pc, #224]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80a1 	beq.w	8003054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f12:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d05c      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d141      	bne.n	8002faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f26:	4b31      	ldr	r3, [pc, #196]	; (8002fec <HAL_RCC_OscConfig+0x478>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fb20 	bl	8001570 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f34:	f7fe fb1c 	bl	8001570 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e087      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f46:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	019b      	lsls	r3, r3, #6
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	491b      	ldr	r1, [pc, #108]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <HAL_RCC_OscConfig+0x478>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe faf5 	bl	8001570 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fe faf1 	bl	8001570 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e05c      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x416>
 8002fa8:	e054      	b.n	8003054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_RCC_OscConfig+0x478>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fade 	bl	8001570 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fe fada 	bl	8001570 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e045      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x444>
 8002fd6:	e03d      	b.n	8003054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e038      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x4ec>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d028      	beq.n	8003050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d121      	bne.n	8003050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d11a      	bne.n	8003050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003028:	4293      	cmp	r3, r2
 800302a:	d111      	bne.n	8003050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	3b01      	subs	r3, #1
 800303a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d107      	bne.n	8003050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800

08003064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0cc      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003078:	4b68      	ldr	r3, [pc, #416]	; (800321c <HAL_RCC_ClockConfig+0x1b8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d90c      	bls.n	80030a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b65      	ldr	r3, [pc, #404]	; (800321c <HAL_RCC_ClockConfig+0x1b8>)
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b63      	ldr	r3, [pc, #396]	; (800321c <HAL_RCC_ClockConfig+0x1b8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0b8      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d020      	beq.n	80030ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b8:	4b59      	ldr	r3, [pc, #356]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a58      	ldr	r2, [pc, #352]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d0:	4b53      	ldr	r3, [pc, #332]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a52      	ldr	r2, [pc, #328]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030dc:	4b50      	ldr	r3, [pc, #320]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	494d      	ldr	r1, [pc, #308]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d044      	beq.n	8003184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d119      	bne.n	8003142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e07f      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d003      	beq.n	8003122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311e:	2b03      	cmp	r3, #3
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003122:	4b3f      	ldr	r3, [pc, #252]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e06f      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003132:	4b3b      	ldr	r3, [pc, #236]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e067      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003142:	4b37      	ldr	r3, [pc, #220]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f023 0203 	bic.w	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4934      	ldr	r1, [pc, #208]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	4313      	orrs	r3, r2
 8003152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003154:	f7fe fa0c 	bl	8001570 <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315a:	e00a      	b.n	8003172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800315c:	f7fe fa08 	bl	8001570 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	; 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e04f      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	4b2b      	ldr	r3, [pc, #172]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 020c 	and.w	r2, r3, #12
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	429a      	cmp	r2, r3
 8003182:	d1eb      	bne.n	800315c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003184:	4b25      	ldr	r3, [pc, #148]	; (800321c <HAL_RCC_ClockConfig+0x1b8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d20c      	bcs.n	80031ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b22      	ldr	r3, [pc, #136]	; (800321c <HAL_RCC_ClockConfig+0x1b8>)
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b20      	ldr	r3, [pc, #128]	; (800321c <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e032      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4916      	ldr	r1, [pc, #88]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	490e      	ldr	r1, [pc, #56]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ea:	f000 f821 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 80031ee:	4602      	mov	r2, r0
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	490a      	ldr	r1, [pc, #40]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	5ccb      	ldrb	r3, [r1, r3]
 80031fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003202:	4a09      	ldr	r2, [pc, #36]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_RCC_ClockConfig+0x1c8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe f96c 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40023c00 	.word	0x40023c00
 8003220:	40023800 	.word	0x40023800
 8003224:	0800342c 	.word	0x0800342c
 8003228:	20000008 	.word	0x20000008
 800322c:	2000000c 	.word	0x2000000c

08003230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003234:	b090      	sub	sp, #64	; 0x40
 8003236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
 800323c:	2300      	movs	r3, #0
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003240:	2300      	movs	r3, #0
 8003242:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003248:	4b59      	ldr	r3, [pc, #356]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b08      	cmp	r3, #8
 8003252:	d00d      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x40>
 8003254:	2b08      	cmp	r3, #8
 8003256:	f200 80a1 	bhi.w	800339c <HAL_RCC_GetSysClockFreq+0x16c>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x34>
 800325e:	2b04      	cmp	r3, #4
 8003260:	d003      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x3a>
 8003262:	e09b      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003266:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003268:	e09b      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800326a:	4b53      	ldr	r3, [pc, #332]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800326c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800326e:	e098      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003270:	4b4f      	ldr	r3, [pc, #316]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003278:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800327a:	4b4d      	ldr	r3, [pc, #308]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d028      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003286:	4b4a      	ldr	r3, [pc, #296]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	2200      	movs	r2, #0
 800328e:	623b      	str	r3, [r7, #32]
 8003290:	627a      	str	r2, [r7, #36]	; 0x24
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003298:	2100      	movs	r1, #0
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800329c:	fb03 f201 	mul.w	r2, r3, r1
 80032a0:	2300      	movs	r3, #0
 80032a2:	fb00 f303 	mul.w	r3, r0, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	4a43      	ldr	r2, [pc, #268]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032aa:	fba0 1202 	umull	r1, r2, r0, r2
 80032ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032b0:	460a      	mov	r2, r1
 80032b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80032b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b6:	4413      	add	r3, r2
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032bc:	2200      	movs	r2, #0
 80032be:	61bb      	str	r3, [r7, #24]
 80032c0:	61fa      	str	r2, [r7, #28]
 80032c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032ca:	f7fd fb73 	bl	80009b4 <__aeabi_uldivmod>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4613      	mov	r3, r2
 80032d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d6:	e053      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d8:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	099b      	lsrs	r3, r3, #6
 80032de:	2200      	movs	r2, #0
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	617a      	str	r2, [r7, #20]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032ea:	f04f 0b00 	mov.w	fp, #0
 80032ee:	4652      	mov	r2, sl
 80032f0:	465b      	mov	r3, fp
 80032f2:	f04f 0000 	mov.w	r0, #0
 80032f6:	f04f 0100 	mov.w	r1, #0
 80032fa:	0159      	lsls	r1, r3, #5
 80032fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003300:	0150      	lsls	r0, r2, #5
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	ebb2 080a 	subs.w	r8, r2, sl
 800330a:	eb63 090b 	sbc.w	r9, r3, fp
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800331a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800331e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003322:	ebb2 0408 	subs.w	r4, r2, r8
 8003326:	eb63 0509 	sbc.w	r5, r3, r9
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	00eb      	lsls	r3, r5, #3
 8003334:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003338:	00e2      	lsls	r2, r4, #3
 800333a:	4614      	mov	r4, r2
 800333c:	461d      	mov	r5, r3
 800333e:	eb14 030a 	adds.w	r3, r4, sl
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	eb45 030b 	adc.w	r3, r5, fp
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003356:	4629      	mov	r1, r5
 8003358:	028b      	lsls	r3, r1, #10
 800335a:	4621      	mov	r1, r4
 800335c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003360:	4621      	mov	r1, r4
 8003362:	028a      	lsls	r2, r1, #10
 8003364:	4610      	mov	r0, r2
 8003366:	4619      	mov	r1, r3
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	2200      	movs	r2, #0
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	60fa      	str	r2, [r7, #12]
 8003370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003374:	f7fd fb1e 	bl	80009b4 <__aeabi_uldivmod>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4613      	mov	r3, r2
 800337e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	3301      	adds	r3, #1
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800339a:	e002      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800339e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3740      	adds	r7, #64	; 0x40
 80033a8:	46bd      	mov	sp, r7
 80033aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	00f42400 	.word	0x00f42400
 80033b8:	017d7840 	.word	0x017d7840

080033bc <__libc_init_array>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	4d0d      	ldr	r5, [pc, #52]	; (80033f4 <__libc_init_array+0x38>)
 80033c0:	4c0d      	ldr	r4, [pc, #52]	; (80033f8 <__libc_init_array+0x3c>)
 80033c2:	1b64      	subs	r4, r4, r5
 80033c4:	10a4      	asrs	r4, r4, #2
 80033c6:	2600      	movs	r6, #0
 80033c8:	42a6      	cmp	r6, r4
 80033ca:	d109      	bne.n	80033e0 <__libc_init_array+0x24>
 80033cc:	4d0b      	ldr	r5, [pc, #44]	; (80033fc <__libc_init_array+0x40>)
 80033ce:	4c0c      	ldr	r4, [pc, #48]	; (8003400 <__libc_init_array+0x44>)
 80033d0:	f000 f820 	bl	8003414 <_init>
 80033d4:	1b64      	subs	r4, r4, r5
 80033d6:	10a4      	asrs	r4, r4, #2
 80033d8:	2600      	movs	r6, #0
 80033da:	42a6      	cmp	r6, r4
 80033dc:	d105      	bne.n	80033ea <__libc_init_array+0x2e>
 80033de:	bd70      	pop	{r4, r5, r6, pc}
 80033e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e4:	4798      	blx	r3
 80033e6:	3601      	adds	r6, #1
 80033e8:	e7ee      	b.n	80033c8 <__libc_init_array+0xc>
 80033ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ee:	4798      	blx	r3
 80033f0:	3601      	adds	r6, #1
 80033f2:	e7f2      	b.n	80033da <__libc_init_array+0x1e>
 80033f4:	0800344c 	.word	0x0800344c
 80033f8:	0800344c 	.word	0x0800344c
 80033fc:	0800344c 	.word	0x0800344c
 8003400:	08003450 	.word	0x08003450

08003404 <memset>:
 8003404:	4402      	add	r2, r0
 8003406:	4603      	mov	r3, r0
 8003408:	4293      	cmp	r3, r2
 800340a:	d100      	bne.n	800340e <memset+0xa>
 800340c:	4770      	bx	lr
 800340e:	f803 1b01 	strb.w	r1, [r3], #1
 8003412:	e7f9      	b.n	8003408 <memset+0x4>

08003414 <_init>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	bf00      	nop
 8003418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341a:	bc08      	pop	{r3}
 800341c:	469e      	mov	lr, r3
 800341e:	4770      	bx	lr

08003420 <_fini>:
 8003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003422:	bf00      	nop
 8003424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003426:	bc08      	pop	{r3}
 8003428:	469e      	mov	lr, r3
 800342a:	4770      	bx	lr
